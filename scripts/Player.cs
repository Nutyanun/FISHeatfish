using Godot;
using System;
using System.Collections.Generic;

public partial class Player : CharacterBody2D
{
	// === CONFIG ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ===
	[Export] public float MaxSpeed = 220f;
	[Export] public float Accel = 900f;
	[Export] public float Friction = 900f;
	[Export] public float BiteCooldown = 0.35f;

	// === ANIMATION NAMES ===
	[Export] public string SwimAnimation = "swim";
	[Export] public string BiteAnimation = "bite";

	// === NODE PATHS ===
	[Export] public NodePath AnimatedSpritePath { get; set; } = "AnimatedSprite2D";
	[Export] public NodePath MouthAreaPath     { get; set; } = "MouthArea";
	[Export] public NodePath HurtAreaPath      { get; set; } = "HurtArea";

	// === ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡∏à‡∏≠ ===
	[Export] public bool  ClampToViewport = false;
	[Export] public float ClampMargin     = 8f;

	// === ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ===
	private AnimatedSprite2D _anim;
	private Area2D _mouthArea;
	private Area2D _hurtArea;
	private float _biteTimer;

	// === ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏Å‡∏¥‡∏• ===
	private bool _berserk, _magnet, _phase;
	private int _shieldStacks;
	private float _biteCooldownBase;
	private float _baseMaxSpeed;
	private float _magnetRadius;
	private double _timeScaleBefore = 1.0;

	// === ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Phase (‡∏à‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á HurtArea) ===
	private bool _hurtAreaWasMonitoring = true;
	private Color _originalModulate = Colors.White;

	// === set ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏Å ===
	private readonly HashSet<Fish> _targetsInMouth = new();

	// ===========================================
	// üü¶ ‡∏™‡πà‡∏ß‡∏ô Helper: ‡∏´‡∏≤ Node ‡∏≠‡∏∑‡πà‡∏ô ‡πÅ‡∏•‡∏∞ Resolve Object
	// ===========================================
	private ScoreManager GetSM()
	{
		return
			GetNodeOrNull<ScoreManager>("%ScoreManager") ??
			GetNodeOrNull<ScoreManager>("/root/Main/ScoreManager") ??
			GetNodeOrNull<ScoreManager>("/root/ScoreManager");
	}

	private Fish ResolveFish(Node n)
	{
		if (n is Fish f) return f;
		if (n.GetParent() is Fish pf) return pf;
		if (n.GetOwner() is Fish of) return of;
		return n.GetParent()?.GetParent() as Fish;
	}

	private bool TryGetFish(Node n, out Fish fish)
	{
		fish = ResolveFish(n);
		return fish != null;
	}

	// ====== ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Coin ======
	private Coin ResolveCoin(Node n)
	{
		if (n is Coin c) return c;
		if (n.GetParent() is Coin pc) return pc;
		if (n.GetOwner() is Coin oc) return oc;
		return n.GetParent()?.GetParent() as Coin;
	}

	private bool TryGetCoin(Node n, out Coin coin)
	{
		coin = ResolveCoin(n);
		return coin != null;
	}

	private void EatCoin(Coin coin)
	{
		if (coin == null || !IsInstanceValid(coin)) return;
		coin.Consume();
	}

	// ====== ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Crystal ======
	private CrystalPickup ResolveCrystal(Node n)
	{
		if (n is CrystalPickup cp) return cp;
		if (n.GetParent() is CrystalPickup p1) return p1;
		if (n.GetOwner() is CrystalPickup p2) return p2;
		return n.GetParent()?.GetParent() as CrystalPickup;
	}

	private bool TryGetCrystal(Node n, out CrystalPickup crystal)
	{
		crystal = ResolveCrystal(n);
		return crystal != null;
	}

	private void EatCrystal(CrystalPickup cp)
	{
		if (cp == null || !IsInstanceValid(cp)) return;
		// ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏±‡∏•‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ï‡∏±‡∏ß SkillManager ‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
		cp.CollectBy(this);
	}

	// ===========================================
	// üü© _Ready(): Setup ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
	// ===========================================
	public override void _Ready()
	{
		_anim      = GetNodeOrNull<AnimatedSprite2D>(AnimatedSpritePath);
		_mouthArea = GetNodeOrNull<Area2D>(MouthAreaPath);
		_hurtArea  = GetNodeOrNull<Area2D>(HurtAreaPath);

		_biteCooldownBase = BiteCooldown;
		_baseMaxSpeed     = MaxSpeed;
		_originalModulate = Modulate;

		if (_anim != null && _anim.SpriteFrames?.HasAnimation(SwimAnimation) == true)
			_anim.Play(SwimAnimation);

		// --- Mouth Area ---
		if (_mouthArea != null)
		{
			_mouthArea.Monitoring  = true;
			_mouthArea.Monitorable = true;

			// üêü ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏•‡∏≤
			_mouthArea.BodyEntered += body => { if (TryGetFish(body, out var fish)) _targetsInMouth.Add(fish); };
			_mouthArea.BodyExited  += body => { if (TryGetFish(body, out var fish)) _targetsInMouth.Remove(fish); };
			_mouthArea.AreaEntered += area => { if (TryGetFish(area, out var fish)) _targetsInMouth.Add(fish); };
			_mouthArea.AreaExited  += area => { if (TryGetFish(area, out var fish)) _targetsInMouth.Remove(fish); };

			// üí∞ Coin: ‡∏Å‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏ô‡∏õ‡∏≤‡∏Å
			_mouthArea.BodyEntered += body => { if (TryGetCoin(body, out var coin)) EatCoin(coin); };
			_mouthArea.AreaEntered += area => { if (TryGetCoin(area, out var coin)) EatCoin(coin); };

			// üíé Crystal: ‡∏Å‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏ô‡∏õ‡∏≤‡∏Å
			_mouthArea.BodyEntered += body => { if (TryGetCrystal(body, out var cp)) EatCrystal(cp); };
			_mouthArea.AreaEntered += area => { if (TryGetCrystal(area, out var cp)) EatCrystal(cp); };
		}

		// --- Hurt Area ---
		if (_hurtArea != null)
		{
			_hurtArea.Monitoring  = true;
			_hurtArea.Monitorable = true;

			_hurtArea.BodyEntered += body => { if (TryGetFish(body, out var fish)) CheckDeathOnTouch(fish); };
			_hurtArea.AreaEntered += area => { if (TryGetFish(area, out var fish)) CheckDeathOnTouch(fish); };
		}
	}

	// ===========================================
	// üü® _PhysicsProcess(): ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß + ‡∏Å‡∏±‡∏î + Magnet
	// ===========================================
	public override void _PhysicsProcess(double delta)
	{
		var sm = GetSM();
		if (sm != null && (sm.IsLevelCleared || sm.IsGameOver)) return;

		// --- ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ---
		Vector2 input = GetMoveInput();
		Vector2 targetVel = input * MaxSpeed;

		Velocity = (input != Vector2.Zero)
			? Velocity.MoveToward(targetVel, Accel * (float)delta)
			: Velocity.MoveToward(Vector2.Zero, Friction * (float)delta);

		MoveAndSlide();

		// --- ‡∏û‡∏•‡∏¥‡∏Å sprite ‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á ---
		if (_anim != null && MathF.Abs(Velocity.X) > 1f)
			_anim.FlipH = Velocity.X < 0f;

		// --- ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏à‡∏≠ ---
		if (ClampToViewport) ClampInsideViewport();

		// --- ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Å‡∏±‡∏î ---
		if (_biteTimer > 0f) _biteTimer -= (float)delta;
		if (Input.IsActionJustPressed("bite") || Input.IsActionJustPressed("ui_accept"))
			TryBite();

		// --- Magnet: ‡∏î‡∏π‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç/‡∏û‡∏¥‡∏Ñ‡∏≠‡∏±‡∏õ ---
		if (_magnet && _magnetRadius > 0f)
			PullCoinsTowardSelf((float)delta);

		// --- ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏õ‡∏•‡∏≤ ---
		UpdateSizeBasedOnScore(sm);
	}

	private Vector2 GetMoveInput()
	{
		float x = Input.GetActionStrength("ui_right") - Input.GetActionStrength("ui_left");
		float y = Input.GetActionStrength("ui_down")  - Input.GetActionStrength("ui_up");
		var v = new Vector2(x, y);
		return v == Vector2.Zero ? v : v.Normalized();
	}

	// ===========================================
	// üü• TryBite(): ‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Berserk + Chain)
	// ===========================================
	private void TryBite()
	{
		var sm = GetSM();
		if (sm != null && (sm.IsLevelCleared || sm.IsGameOver)) return;

		if (_biteTimer > 0f) return;
		_biteTimer = BiteCooldown;

		// --- ‡πÄ‡∏•‡πà‡∏ô animation ‡∏Å‡∏±‡∏î ---
		if (_anim != null && _anim.SpriteFrames?.HasAnimation(BiteAnimation) == true)
			_anim.Play(BiteAnimation);

		// --- ‡πÄ‡∏ä‡πá‡∏Å‡∏õ‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
		var toCheck = new List<Fish>(_targetsInMouth);
		foreach (var fish in toCheck)
		{
			if (!IsInstanceValid(fish)) { _targetsInMouth.Remove(fish); continue; }

			// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏ï‡∏≤‡∏¢ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏°‡∏µ‡πÇ‡∏•‡πà ‡∏´‡∏£‡∏∑‡∏≠ Phase)
			if (sm != null && sm.Score < fish.RequiredScore)
			{
				AttemptDieOrSpendShield(fish, reason: "Too small to bite");
				return;
			}

			// ‚úÖ ‡∏ö‡∏ß‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏Ñ‡∏¥‡∏î‡πÇ‡∏ö‡∏ô‡∏±‡∏™ Berserk)
			int gained = CalcBiteScore(fish.Points);
			sm?.AddScore(gained, fish.FishType);

			// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏•‡∏≤
			fish.OnEaten();
			GD.Print($"[Player] Eat {fish.FishType}, +{gained}");

			// üî¥ ‡∏Å‡∏±‡∏î‡∏•‡∏≤‡∏°‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Berserk
			if (_berserk)
				ChainBiteNearby(fish.GlobalPosition, 60f, maxChain: 2);

			_targetsInMouth.Remove(fish);
			break;
		}

		// --- ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏¢ ---
		if (_anim != null && _anim.SpriteFrames?.HasAnimation(SwimAnimation) == true)
			_anim.Play(SwimAnimation);
	}

	// ===========================================
	// ‚ò†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏¢/‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏¢ (‡πÇ‡∏•‡πà & Phase)
	// ===========================================
	private void CheckDeathOnTouch(Fish fish)
	{
		var sm = GetSM();
		if (sm == null || sm.IsLevelCleared || sm.IsGameOver) return;
		if (!IsInstanceValid(fish)) return;

		// Phase: ‡∏ó‡∏∞‡∏•‡∏∏‡∏ú‡πà‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô
		if (_phase) return;

		if (sm.Score < fish.RequiredScore)
		{
			AttemptDieOrSpendShield(fish, reason: "Touch bigger fish");
		}
	}

	private void AttemptDieOrSpendShield(Fish source, string reason)
	{
		var sm = GetSM();
		if (sm == null) return;

		if (_shieldStacks > 0)
		{
			_shieldStacks--;
			ShowShieldFx(_shieldStacks > 0);
			// ‡∏ú‡∏•‡∏±‡∏Å‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ü‡∏µ‡∏î‡πÅ‡∏ö‡πá‡∏Å
			if (IsInstanceValid(source))
			{
				Vector2 dir = (source.GlobalPosition - GlobalPosition).Normalized();
				source.GlobalPosition += dir * 24f;
			}
			GD.Print($"[Player] Shield saved life ({reason}). Stacks left: {_shieldStacks}");
			return;
		}

		GD.Print($"[Player] {reason} ‚Üí DIE");
		sm.LoseLife(1);
	}

	// ===========================================
	// üü© ClampInsideViewport(): ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏à‡∏≠
	// ===========================================
	private void ClampInsideViewport()
	{
		var rect = GetViewportRect();
		float minX = rect.Position.X + ClampMargin;
		float maxX = rect.End.X     - ClampMargin;
		float minY = rect.Position.Y + ClampMargin;
		float maxY = rect.End.Y     - ClampMargin;

		GlobalPosition = new Vector2(
			Mathf.Clamp(GlobalPosition.X, minX, maxX),
			Mathf.Clamp(GlobalPosition.Y, minY, maxY)
		);
	}

	private void UpdateSizeBasedOnScore(ScoreManager sm)
	{
		if (sm == null) return;

		float targetScale = 1.0f; // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

		if (sm.Score >= 30)
			targetScale = 2.4f; // ‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î
		else if (sm.Score >= 15)
			targetScale = 1.9f;
		else if (sm.Score >= 10)
			targetScale = 1.3f;

		// ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ smooth
		Scale = Scale.Lerp(Vector2.One * targetScale, 0.05f);
	}

	// =====================================================
	// ====== üîß ‡πÄ‡∏°‡∏ò‡∏≠‡∏î "‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Å‡∏¥‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö ======
	// =====================================================

	// ‚Äî Berserk: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏Å‡∏±‡∏î 2x ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Å‡∏±‡∏î 30%
	public void SetBerserk(bool on)
	{
		_berserk = on;
		BiteCooldown = on ? _biteCooldownBase * 0.7f : _biteCooldownBase;
	}

	// ‚Äî Time Freeze: ‡∏ä‡∏∞‡∏•‡∏≠‡πÇ‡∏•‡∏Å (‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏°)
	public void SetTimeFreeze(bool on, float worldScale = 0.35f)
	{
		if (on)
		{
			_timeScaleBefore = Engine.TimeScale;                   // double -> double (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
			float clamped = Mathf.Clamp(worldScale, 0.1f, 1f);     // clamp ‡πÄ‡∏õ‡πá‡∏ô float
			Engine.TimeScale = (double)clamped;                    // ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô double
		}
		else
		{
			Engine.TimeScale = (_timeScaleBefore <= 0.0) ? 1.0 : _timeScaleBefore;
		}
	}

	// ‚Äî Shield: ‡πÇ‡∏•‡πà‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏¢ 1 ‡∏ä‡∏±‡πâ‡∏ô (‡∏ã‡πâ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 1)
	public void GiveThornShield(int stacks)
	{
		_shieldStacks = Math.Min(_shieldStacks + stacks, 1);
		ShowShieldFx(_shieldStacks > 0);
	}
	public void RemoveThornIfAny()
	{
		_shieldStacks = 0;
		ShowShieldFx(false);
	}

	// ‚Äî Magnet: ‡∏î‡∏π‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç/‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
	public void SetMagnet(bool on, float radius = 260f, float speedBoost = 0.15f)
	{
		_magnet = on;
		_magnetRadius = on ? radius : 0f;
		MaxSpeed = _baseMaxSpeed * (on ? (1f + speedBoost) : 1f);
	}

	// ‚Äî Phase: ‡∏ó‡∏∞‡∏•‡∏∏‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ (‡∏õ‡∏¥‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏ô‡πÉ‡∏ô HurtArea) + ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
	public void SetPhase(bool on)
	{
		_phase = on;

		if (_hurtArea != null)
		{
			if (on)
			{
				_hurtAreaWasMonitoring = _hurtArea.Monitoring;
				_hurtArea.Monitoring = false;
			}
			else
			{
				_hurtArea.Monitoring = _hurtAreaWasMonitoring;
			}
		}

		Modulate = on ? new Color(1, 1, 1, 0.7f) : _originalModulate;
	}

	// ====== ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏¢‡πà‡∏≠‡∏¢ ‡πÜ ======
	private void ShowShieldFx(bool enabled)
	{
		// TODO: ‡πÅ‡∏õ‡∏∞‡∏™‡πÑ‡∏õ‡∏£‡∏ï‡πå/‡∏û‡∏≤‡∏£‡πå‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏¥‡∏•‡πÇ‡∏•‡πà ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
		// ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ VFX ‡∏Å‡πá‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
	}

	// ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏±‡∏î‡∏£‡∏ß‡∏° (Berserk = x2)
	private int CalcBiteScore(int baseScore) => _berserk ? (int)MathF.Round(baseScore * 2f) : baseScore;

	// ‡∏Å‡∏±‡∏î‡∏•‡∏≤‡∏°: ‡∏´‡∏≤ "‡∏õ‡∏•‡∏≤" ‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏Å‡∏±‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
	private void ChainBiteNearby(Vector2 at, float radius = 60f, int maxChain = 2)
	{
		if (!_berserk) return;

		int chain = 0;
		foreach (var n in GetTree().GetNodesInGroup("fish"))
		{
			if (chain >= maxChain) break;
			if (n is not Fish f || !IsInstanceValid(f)) continue;

			if (f.GlobalPosition.DistanceTo(at) <= radius)
			{
				var sm = GetSM();
				if (sm == null) break;

				// ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
				if (sm.Score >= f.RequiredScore)
				{
					int gained = CalcBiteScore(f.Points);
					sm.AddScore(gained, f.FishType);
					f.OnEaten();
					chain++;
					GD.Print($"[Player] Chain bite {f.FishType}, +{gained}");
				}
			}
		}
	}

	// Magnet: ‡∏î‡∏∂‡∏á Coin/‡∏û‡∏¥‡∏Ñ‡∏≠‡∏±‡∏õ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° "coins" ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏ï‡∏±‡∏ß
	private void PullCoinsTowardSelf(float delta)
	{
		const float pullSpeed = 900f; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ö‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡πÄ‡∏£‡∏≤
		foreach (var n in GetTree().GetNodesInGroup("coins"))
		{
			if (n is not Node2D node || !IsInstanceValid(node)) continue;
			float dist = node.GlobalPosition.DistanceTo(GlobalPosition);
			if (dist <= _magnetRadius)
			{
				Vector2 dir = (GlobalPosition - node.GlobalPosition).Normalized();
				node.GlobalPosition += dir * pullSpeed * delta;
			}
		}
	}
}
