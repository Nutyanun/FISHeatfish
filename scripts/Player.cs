using Godot;
using System;
using System.Collections.Generic;

public partial class Player : CharacterBody2D
{
	// === CONFIG ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ===
	[Export] public float MaxSpeed = 220f;
	[Export] public float Accel = 900f;
	[Export] public float Friction = 900f;
	[Export] public float BiteCooldown = 0.35f;

	// === ANIMATION NAMES ===
	[Export] public string SwimAnimation = "swim";
	[Export] public string BiteAnimation = "bite";

	// === NODE PATHS ===
	[Export] public NodePath AnimatedSpritePath { get; set; } = "AnimatedSprite2D";
	[Export] public NodePath MouthAreaPath     { get; set; } = "MouthArea";
	[Export] public NodePath HurtAreaPath      { get; set; } = "HurtArea";

	// === ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡∏à‡∏≠ ===
	[Export] public bool  ClampToViewport = false;
	[Export] public float ClampMargin     = 8f;

	// === ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ===
	private AnimatedSprite2D _anim;
	private Area2D _mouthArea;
	private Area2D _hurtArea;
	private float _biteTimer;

	// === set ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏Å ===
	private readonly HashSet<Fish> _targetsInMouth = new();

	// ===========================================
	// üü¶ ‡∏™‡πà‡∏ß‡∏ô Helper: ‡∏´‡∏≤ Node ‡∏≠‡∏∑‡πà‡∏ô ‡πÅ‡∏•‡∏∞ Resolve Object
	// ===========================================

	private ScoreManager GetSM()
	{
		// ‡∏´‡∏≤ ScoreManager ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö local ‡πÅ‡∏•‡∏∞ global
		return
			GetNodeOrNull<ScoreManager>("%ScoreManager") ??
			GetNodeOrNull<ScoreManager>("/root/Main/ScoreManager") ??
			GetNodeOrNull<ScoreManager>("/root/ScoreManager");
	}

	private Fish ResolveFish(Node n)
	{
		// ‡∏´‡∏≤‡∏ß‡πà‡∏≤ node ‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏Ñ‡∏∑‡∏≠ Fish ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ç‡∏≠‡∏á Fish
		if (n is Fish f) return f;
		if (n.GetParent() is Fish pf) return pf;
		if (n.GetOwner() is Fish of) return of;
		return n.GetParent()?.GetParent() as Fish;
	}

	private bool TryGetFish(Node n, out Fish fish)
	{
		fish = ResolveFish(n);
		return fish != null;
	}

	// ====== ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Coin ======
	private Coin ResolveCoin(Node n)
	{
		if (n is Coin c) return c;
		if (n.GetParent() is Coin pc) return pc;
		if (n.GetOwner() is Coin oc) return oc;
		return n.GetParent()?.GetParent() as Coin;
	}

	private bool TryGetCoin(Node n, out Coin coin)
	{
		coin = ResolveCoin(n);
		return coin != null;
	}

	private void EatCoin(Coin coin)
	{
		if (coin == null || !IsInstanceValid(coin)) return;
		// ‡πÉ‡∏´‡πâ Coin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏ß‡∏Å‡∏ú‡πà‡∏≤‡∏ô Player ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Å‡∏•‡πÑ‡∏Å bonus)
		coin.Consume();
	}

	// ===========================================
	// üü© _Ready(): Setup ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
	// ===========================================
	public override void _Ready()
	{
		_anim      = GetNodeOrNull<AnimatedSprite2D>(AnimatedSpritePath);
		_mouthArea = GetNodeOrNull<Area2D>(MouthAreaPath);
		_hurtArea  = GetNodeOrNull<Area2D>(HurtAreaPath);

		if (_anim != null && _anim.SpriteFrames?.HasAnimation(SwimAnimation) == true)
			_anim.Play(SwimAnimation);

		// --- Mouth Area ---
		if (_mouthArea != null)
		{
			_mouthArea.Monitoring  = true;
			_mouthArea.Monitorable = true;

			// üêü ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏•‡∏≤
			_mouthArea.BodyEntered += body => { if (TryGetFish(body, out var fish)) _targetsInMouth.Add(fish); };
			_mouthArea.BodyExited  += body => { if (TryGetFish(body, out var fish)) _targetsInMouth.Remove(fish); };
			_mouthArea.AreaEntered += area => { if (TryGetFish(area, out var fish)) _targetsInMouth.Add(fish); };
			_mouthArea.AreaExited  += area => { if (TryGetFish(area, out var fish)) _targetsInMouth.Remove(fish); };

			// üí∞ Coin: ‡∏Å‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏ô‡∏õ‡∏≤‡∏Å
			_mouthArea.BodyEntered += body => { if (TryGetCoin(body, out var coin)) EatCoin(coin); };
			_mouthArea.AreaEntered += area => { if (TryGetCoin(area, out var coin)) EatCoin(coin); };
		}

		// --- Hurt Area ---
		if (_hurtArea != null)
		{
			_hurtArea.Monitoring  = true;
			_hurtArea.Monitorable = true;

			// ‡∏ä‡∏ô‡∏õ‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô ‚Üí ‡∏ï‡∏≤‡∏¢
			_hurtArea.BodyEntered += body => { if (TryGetFish(body, out var fish)) CheckDeathOnTouch(fish); };
			_hurtArea.AreaEntered += area => { if (TryGetFish(area, out var fish)) CheckDeathOnTouch(fish); };
		}
	}

	// ===========================================
	// üü® _PhysicsProcess(): ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß + ‡∏Å‡∏±‡∏î
	// ===========================================
	public override void _PhysicsProcess(double delta)
	{
		var sm = GetSM();
		if (sm != null && (sm.IsLevelCleared || sm.IsGameOver)) return;

		// --- ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ---
		Vector2 input = GetMoveInput();
		Vector2 targetVel = input * MaxSpeed;

		Velocity = (input != Vector2.Zero)
			? Velocity.MoveToward(targetVel, Accel * (float)delta)
			: Velocity.MoveToward(Vector2.Zero, Friction * (float)delta);

		MoveAndSlide();

		// --- ‡∏û‡∏•‡∏¥‡∏Å sprite ‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á ---
		if (_anim != null && MathF.Abs(Velocity.X) > 1f)
			_anim.FlipH = Velocity.X < 0f;

		// --- ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏à‡∏≠ ---
		if (ClampToViewport) ClampInsideViewport();

		// --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cooldown ‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏î ---
		if (_biteTimer > 0f) _biteTimer -= (float)delta;
		if (Input.IsActionJustPressed("bite") || Input.IsActionJustPressed("ui_accept"))
			TryBite();

		// --- ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏õ‡∏•‡∏≤ ---
		UpdateSizeBasedOnScore(sm);
	}

	private Vector2 GetMoveInput()
	{
		float x = Input.GetActionStrength("ui_right") - Input.GetActionStrength("ui_left");
		float y = Input.GetActionStrength("ui_down")  - Input.GetActionStrength("ui_up");
		var v = new Vector2(x, y);
		return v == Vector2.Zero ? v : v.Normalized();
	}

	// ===========================================
	// üü• TryBite(): ‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≤
	// ===========================================
	private void TryBite()
	{
		var sm = GetSM();
		if (sm != null && (sm.IsLevelCleared || sm.IsGameOver)) return;

		if (_biteTimer > 0f) return;
		_biteTimer = BiteCooldown;

		// --- ‡πÄ‡∏•‡πà‡∏ô animation ‡∏Å‡∏±‡∏î ---
		if (_anim != null && _anim.SpriteFrames?.HasAnimation(BiteAnimation) == true)
			_anim.Play(BiteAnimation);

		// --- ‡πÄ‡∏ä‡πá‡∏Å‡∏õ‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
		var toCheck = new List<Fish>(_targetsInMouth);
		foreach (var fish in toCheck)
		{
			if (!IsInstanceValid(fish)) { _targetsInMouth.Remove(fish); continue; }

			// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏ï‡∏≤‡∏¢
			if (sm != null && sm.Score < fish.RequiredScore)
			{
				GD.Print($"[Player] Too small to bite {fish.Name}: need {fish.RequiredScore}, have {sm.Score} ‚Üí DIE");
				sm.LoseLife(1);
				return;
			}

			// ‚úÖ ‡∏ö‡∏ß‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏™‡πà‡∏á fishType ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢)
			sm?.AddScore(fish.Points, fish.FishType);

			// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GameProgress (‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏•‡∏≤)
			fish.OnEaten();

			GD.Print($"[Player] Eat {fish.FishType}, +{fish.Points}");

			_targetsInMouth.Remove(fish);
			break;
		}

		// --- ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏¢ ---
		if (_anim != null && _anim.SpriteFrames?.HasAnimation(SwimAnimation) == true)
			_anim.Play(SwimAnimation);
	}

	// ===========================================
	// ‚ò†Ô∏è CheckDeathOnTouch(): ‡∏ä‡∏ô‡∏õ‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô
	// ===========================================
	private void CheckDeathOnTouch(Fish fish)
	{
		var sm = GetSM();
		if (sm == null || sm.IsLevelCleared || sm.IsGameOver) return;
		if (!IsInstanceValid(fish)) return;

		if (sm.Score < fish.RequiredScore)
		{
			GD.Print($"[Player] Touch big {fish.Name}: need {fish.RequiredScore}, have {sm.Score} ‚Üí DIE");
			sm.LoseLife(1);
		}
	}

	// ===========================================
	// üü© ClampInsideViewport(): ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏à‡∏≠
	// ===========================================
	private void ClampInsideViewport()
	{
		var rect = GetViewportRect();
		float minX = rect.Position.X + ClampMargin;
		float maxX = rect.End.X     - ClampMargin;
		float minY = rect.Position.Y + ClampMargin;
		float maxY = rect.End.Y     - ClampMargin;

		GlobalPosition = new Vector2(
			Mathf.Clamp(GlobalPosition.X, minX, maxX),
			Mathf.Clamp(GlobalPosition.Y, minY, maxY)
		);
	}

	private void UpdateSizeBasedOnScore(ScoreManager sm)
	{
		if (sm == null) return;

		float targetScale = 1.0f; // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

		if (sm.Score >= 30)
			targetScale = 2.4f; // ‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î
		else if (sm.Score >= 15)
			targetScale = 1.9f;
		else if (sm.Score >= 10)
			targetScale = 1.3f;

		// ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ smooth
		Scale = Scale.Lerp(Vector2.One * targetScale, 0.05f);
	}
}
