using Godot;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
// ‡πÉ‡∏ä‡πâ GDict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö LeaderboardStore (Godot.Dictionary)
using GDict = Godot.Collections.Dictionary;

public partial class PlayerLogin : Node
{
	public static PlayerLogin Instance { get; private set; }

	// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ set ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ Error CS0272)
	public SaveData CurrentUser { get; set; }
	public string TodayKey { get; private set; }

	// ‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‚Äú‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á‚Äù ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô user:// ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
	private string SavePathUser = "user://players.json";

	public class SaveData
	{
		public string PlayerName { get; set; }
		public string Password   { get; set; }
		public string CreatedAt  { get; set; }
	}

	private string MakeTodayKeyLocal() => DateTime.Now.ToString("yyyy-MM-dd");

	public void StampTodayKey()
	{
		TodayKey = MakeTodayKeyLocal();
		GD.Print($"üóìÔ∏è TodayKey set to {TodayKey}");
	}

	public void SetCurrentUserAndStampToday(SaveData user)
	{
		CurrentUser = user;
		StampTodayKey();
		GD.Print($"üîë Login as {CurrentUser?.PlayerName ?? "(null)"} ; TodayKey={TodayKey}");
	}

	public override void _Ready()
	{
		Instance = this;
		TodayKey = MakeTodayKeyLocal();
		GD.Print("üü¢ PlayerLogin ready at " + ProjectSettings.GlobalizePath(SavePathUser));
		GD.Print($"üóìÔ∏è Initial TodayKey = {TodayKey}");
	}

	// ===== Loader: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÄ‡∏Å‡πà‡∏≤ [] ‡πÅ‡∏•‡∏∞‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà { "players": { ... } } ; ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user:// =====
	public List<SaveData> LoadPlayers()
	{
		try
		{
			string pathUser = ProjectSettings.GlobalizePath(SavePathUser);
			if (!File.Exists(pathUser)) return new List<SaveData>();

			string json = File.ReadAllText(pathUser);
			if (string.IsNullOrWhiteSpace(json)) return new List<SaveData>();

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å schema
			char first = '\0';
			foreach (var ch in json) { if (!char.IsWhiteSpace(ch)) { first = ch; break; } }

			// ‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÄ‡∏Å‡πà‡∏≤: ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå SaveData ‡∏ï‡∏£‡∏á ‡πÜ
			if (first == '[')
			{
				return JsonSerializer.Deserialize<List<SaveData>>(json) ?? new List<SaveData>();
			}

			// ‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ "players"
			using var doc = JsonDocument.Parse(json);
			var root = doc.RootElement;
			if (root.ValueKind != JsonValueKind.Object) return new List<SaveData>();
			if (!root.TryGetProperty("players", out var playersElem) || playersElem.ValueKind != JsonValueKind.Object)
				return new List<SaveData>();

			var list = new List<SaveData>();
			foreach (var prop in playersElem.EnumerateObject())
			{
				var name = prop.Name;
				var pObj = prop.Value;

				string pwd = "";
				string reg = "";

				if (pObj.ValueKind == JsonValueKind.Object)
				{
					if (pObj.TryGetProperty("password", out var pwdElem) && pwdElem.ValueKind == JsonValueKind.String)
						pwd = pwdElem.GetString() ?? "";

					// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á registered_at ‡πÅ‡∏•‡∏∞ CreatedAt
					if (pObj.TryGetProperty("registered_at", out var regElem) && regElem.ValueKind == JsonValueKind.String)
						reg = regElem.GetString() ?? "";
					else if (pObj.TryGetProperty("CreatedAt", out var reg2Elem) && reg2Elem.ValueKind == JsonValueKind.String)
						reg = reg2Elem.GetString() ?? "";
				}

				if (string.IsNullOrEmpty(reg))
					reg = DateTime.UtcNow.ToString("o");

				list.Add(new SaveData {
					PlayerName = name,
					Password   = pwd,
					CreatedAt  = reg
				});
			}

			return list;
		}
		catch (Exception ex)
		{
			GD.PushError("‚ùå Failed to parse JSON: " + ex.Message);
			return new List<SaveData>();
		}
	}

	// ===== ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ú‡πà‡∏≤‡∏ô LeaderboardStore; ‡πÑ‡∏°‡πà‡∏¢‡∏∏‡πà‡∏á‡∏Å‡∏±‡∏ö res://) =====
	public bool SavePlayer(string name, string password)
	{
		var doc = LeaderboardStore.LoadDoc();
		doc = LeaderboardStore.EnsureRoot(doc); // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ keys ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "players"

		var players = (GDict)doc["players"];
		if (players.ContainsKey(name))
		{
			GD.Print("üö´ Duplicate name: " + name);
			return false;
		}

		var nowIso = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz");
		players[name] = new GDict {
			{ "password",      password },
			{ "registered_at", nowIso },
			{ "levels",        new GDict() } // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
		};

		// ‡πÄ‡∏ã‡∏ü‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏ß‡∏° (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô LeaderboardStore ‡πÄ‡∏≠‡∏á)
		LeaderboardStore.SaveDoc(doc);

		GD.Print("‚úÖ Saved new user (new schema only): " + name);

		SetCurrentUserAndStampToday(new SaveData {
			PlayerName = name,
			Password   = password,
			CreatedAt  = nowIso
		});

		return true;
	}

	// ===== ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏° (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå user://players.json) =====
	public bool LoginExisting(string name, string password)
	{
		var list = LoadPlayers();
		var user = list.Find(p => p.PlayerName == name && p.Password == password);
		if (user == null) return false;

		SetCurrentUserAndStampToday(user);
		return true;
	}
}
