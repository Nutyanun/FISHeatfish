using Godot;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

public partial class PlayerLogin : Node
{
	// ‚úÖ Instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö Singleton
	public static PlayerLogin Instance { get; private set; }

	// ‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏∞‡πÄ‡∏ã‡∏ï‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
	public SaveData CurrentUser { get; private set; }

	// ‚úÖ Path ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
	private string SavePathUser = "user://players.json";
	private string SavePathRes = "res://SceneLogin/SaveUserLogin/players.json";

	// ‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	public class SaveData
	{
		public string PlayerName { get; set; }
		public string Password { get; set; }  // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á ‡πÜ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
		public string CreatedAt { get; set; } // ‡∏ß‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£
	}

	public override void _Ready()
	{
		Instance = this;
		GD.Print("üü¢ PlayerLogin ready at " + ProjectSettings.GlobalizePath(SavePathUser));
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	public List<SaveData> LoadPlayers()
	{
		string json = "";
		string pathUser = ProjectSettings.GlobalizePath(SavePathUser);
		string pathRes = ProjectSettings.GlobalizePath(SavePathRes);

		if (File.Exists(pathUser))
		{
			GD.Print("üìÇ Loading players from USER path");
			json = File.ReadAllText(pathUser);
		}
		else if (File.Exists(pathRes))
		{
			GD.Print("üìÇ Loading players from RES path");
			json = File.ReadAllText(pathRes);
		}
		else
		{
			GD.Print("‚ö†Ô∏è No players.json found.");
			return new List<SaveData>();
		}

		try
		{
			return JsonSerializer.Deserialize<List<SaveData>>(json) ?? new List<SaveData>();
		}
		catch (Exception ex)
		{
			GD.PushError("‚ùå Failed to parse JSON: " + ex.Message);
			return new List<SaveData>();
		}
	}

	// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏ä‡∏∑‡πà‡∏≠ + ‡∏£‡∏´‡∏±‡∏™)
	public bool SavePlayer(string name, string password)
	{
		var list = LoadPlayers();

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
		if (list.Exists(p => p.PlayerName == name))
		{
			GD.Print("üö´ Duplicate name: " + name);
			return false;
		}

		var newUser = new SaveData
		{
			PlayerName = name,
			Password = password,              // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á ‡πÜ
			CreatedAt = DateTime.UtcNow.ToString("o") // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (ISO 8601)
		};

		list.Add(newUser);
		string json = JsonSerializer.Serialize(list, new JsonSerializerOptions { WriteIndented = true });

		// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
		try
		{
			File.WriteAllText(ProjectSettings.GlobalizePath(SavePathUser), json);
			File.WriteAllText(ProjectSettings.GlobalizePath(SavePathRes), json);
			GD.Print("‚úÖ Saved new user: " + name);
		}
		catch (Exception ex)
		{
			GD.PushError("‚ùå Failed to save player file: " + ex.Message);
			return false;
		}

		// ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		CurrentUser = newUser;
		return true;
	}
}
