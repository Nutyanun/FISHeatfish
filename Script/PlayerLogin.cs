using Godot;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

public partial class PlayerLogin : Node
{
	// ‚úÖ Singleton instance ‚Äî ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô PlayerLogin.Instance
	public static PlayerLogin Instance { get; private set; }

	// ‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ set ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å ‡πÄ‡∏ä‡πà‡∏ô LoginGame.cs)
	public SaveData CurrentUser { get; set; }

	// ‚úÖ Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	private string SavePathUser = "user://players.json";   // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ)
	private string SavePathRes  = "res://SceneLogin/SaveUserLogin/players.json"; // ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö (‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô editor)

	// ‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå)
	public class SaveData
	{
		public string PlayerName { get; set; }   // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
		public string Password { get; set; }     // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏£‡∏á ‡πÜ)
		public string CreatedAt { get; set; }    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (ISO 8601)
	}

	// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Node ‡∏û‡∏£‡πâ‡∏≠‡∏°
	public override void _Ready()
	{
		Instance = this; // ‡∏ï‡∏±‡πâ‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Singleton
		GD.Print("üü¢ PlayerLogin ready at " + ProjectSettings.GlobalizePath(SavePathUser));
	}

	// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
	public List<SaveData> LoadPlayers()
	{
		string json = "";
		string pathUser = ProjectSettings.GlobalizePath(SavePathUser);
		string pathRes  = ProjectSettings.GlobalizePath(SavePathRes);

		if (File.Exists(pathUser))
		{
			GD.Print("üìÇ Loading players from USER path");
			json = File.ReadAllText(pathUser);
		}
		else if (File.Exists(pathRes))
		{
			GD.Print("üìÇ Loading players from RES path");
			json = File.ReadAllText(pathRes);
		}
		else
		{
			GD.Print("‚ö†Ô∏è No players.json found.");
			return new List<SaveData>();
		}

		try
		{
			return JsonSerializer.Deserialize<List<SaveData>>(json) ?? new List<SaveData>();
		}
		catch (Exception ex)
		{
			GD.PushError("‚ùå Failed to parse JSON: " + ex.Message);
			return new List<SaveData>();
		}
	}

	// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà)
	public bool SavePlayer(string name, string password)
	{
		var list = LoadPlayers();

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
		if (list.Exists(p => p.PlayerName == name))
		{
			GD.Print("üö´ Duplicate name: " + name);
			return false;
		}

		var newUser = new SaveData
		{
			PlayerName = name,
			Password   = password,
			CreatedAt  = DateTime.UtcNow.ToString("o")
		};

		list.Add(newUser);
		string json = JsonSerializer.Serialize(list, new JsonSerializerOptions { WriteIndented = true });

		// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå (user:// ‡πÅ‡∏•‡∏∞ res://)
		try
		{
			File.WriteAllText(ProjectSettings.GlobalizePath(SavePathUser), json);

			// ‚ùó ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: res:// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Editor
			// ‡∏ñ‡πâ‡∏≤ export ‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≤‡∏à‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
			File.WriteAllText(ProjectSettings.GlobalizePath(SavePathRes), json);

			GD.Print("‚úÖ Saved new user: " + name);
		}
		catch (Exception ex)
		{
			GD.PushError("‚ùå Failed to save player file: " + ex.Message);
			return false;
		}

		// ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		CurrentUser = newUser;
		return true;
	}
}
