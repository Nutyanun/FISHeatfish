using Godot;                       
using System;                      
using System.Collections.Generic;  // ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ß‡∏Å List<T>, Dictionary<T> ‡∏Ø‡∏•‡∏Ø
using System.IO;  // ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏ä‡πà‡∏ô File.ReadAllText(), File.Exists()
using System.Text.Json; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô JSON (serialize / deserialize)
using GDict = Godot.Collections.Dictionary; // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ Godot.Collections.Dictionary ‡πÄ‡∏õ‡πá‡∏ô GDict

//
//// PlayerLogin (Autoload/Singleton)  ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ã‡∏¥‡∏á‡πÄ‡∏Å‡∏¥‡∏•‡∏ï‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏ã‡∏µ‡∏ô
//// - ‡∏ñ‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô CurrentUser, CurrentPlayerName, TodayKey  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
////- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå players.json (‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏´‡∏±‡∏™/‡πÄ‡∏•‡πÄ‡∏ß‡∏•) ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
//// - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ / ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô / mirror ‡πÑ‡∏õ res:// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡πÉ‡∏ô Editor  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏Å‡∏°
//// ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô Autoload ‡πÉ‡∏ô Project Settings ‚Üí Autoload  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏∏‡∏Å‡∏ã‡∏µ‡∏ô
//
public partial class PlayerLogin : Node   // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™ PlayerLogin ‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å Node (Godot)
{
	// Single Instance 
	public static PlayerLogin Instance { get; private set; } // ‡∏≠‡∏¥‡∏ô‡∏™‡πÅ‡∏ï‡∏ô‡∏ã‡πå‡πÅ‡∏ö‡∏ö‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏• ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà

	// Public State
	public string CurrentPlayerName { get; private set; } = "Guest"; // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô Guest
	public SaveData CurrentUser { get; set; }  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå SaveData
	public string TodayKey { get; internal set; }  // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "2025-10-15"

	// Storage Paths
	private string SavePathUser = "user://players.json"; // ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô user data)
	private string DefaultPath = "res://SceneLogin/saveUserLogin/players.json"; // ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå)

	/// <summary> 
	/// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1 ‡∏Ñ‡∏ô (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö serialize / deserialize)
	/// </summary>
	public class SaveData // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ñ‡∏•‡∏≤‡∏™‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ SaveData
	{
		public string PlayerName { get; set; } // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå)
		public string Password   { get; set; } // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
		public string CreatedAt  { get; set; } // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO)
	}

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô "2025-10-15"
	private string MakeTodayKeyLocal() => DateTime.Now.ToString("yyyy-MM-dd"); // ‡πÉ‡∏ä‡πâ DateTime.Now ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö yyyy-MM-dd

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï TodayKey ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	public void StampTodayKey()
	{
		TodayKey = MakeTodayKeyLocal();  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å MakeTodayKeyLocal() ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô TodayKey
		GD.Print($"üóìÔ∏è TodayKey set to {TodayKey}");// ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡πÉ‡∏ô Output
	}

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
	public void SetCurrentUserAndStampToday(SaveData user)
	{
		CurrentUser = user;// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		StampTodayKey();   // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
		GD.Print($"üîë Login as {CurrentUser?.PlayerName ?? "(null)"} ; TodayKey={TodayKey}"); // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô Output
	}

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Godot ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠ Node ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ã‡∏µ‡∏ô)
	public override void _Ready()
	{
		Instance = this;    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Instance ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ô‡∏µ‡πâ (Autoload)
		TodayKey = MakeTodayKeyLocal(); // ‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ TodayKey

		// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á path user:// ‡πÄ‡∏õ‡πá‡∏ô path ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
		GD.Print("üü¢ PlayerLogin ready at " + ProjectSettings.GlobalizePath(SavePathUser));

		// ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ TodayKey ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
		GD.Print($"üóìÔ∏è Initial TodayKey = {TodayKey}");

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå players.json ‡πÉ‡∏ô user:// ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á
		if (!Godot.FileAccess.FileExists(SavePathUser))
		{
			// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå user:// ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏ô res://
			if (Godot.FileAccess.FileExists(DefaultPath))
			{
				using var src = Godot.FileAccess.Open(DefaultPath, Godot.FileAccess.ModeFlags.Read); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô
				using var dst = Godot.FileAccess.Open(SavePathUser, Godot.FileAccess.ModeFlags.Write); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
				dst.StoreString(src.GetAsText());             // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
				GD.Print($"üì¶ Copied default players.json to {SavePathUser}"); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡πä‡∏≠‡∏õ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à
			}
			else
			{
				// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏¢ ‚Üí ‡πÅ‡∏à‡πâ‡∏á error
				GD.PushError("‚ùå Default player file not found at " + DefaultPath);
			}
		}
	}
	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å (mirror) ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å user:// ‚Üí res://
	// ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡πÉ‡∏ô Editor ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ res:// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤
	private void MirrorToRes()
	{
		try
		{
			string userPath = ProjectSettings.GlobalizePath(SavePathUser); // ‡πÅ‡∏õ‡∏•‡∏á path ‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô user:// ‚Üí path ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
			string resPath  = ProjectSettings.GlobalizePath(DefaultPath);  // ‡πÅ‡∏õ‡∏•‡∏á path ‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô res:// ‚Üí path ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á

			if (System.IO.File.Exists(userPath)) // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô user:// ‡∏à‡∏£‡∏¥‡∏á
			{
				System.IO.File.Copy(userPath, resPath, true); // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á res:// ‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° (true = overwrite)
				GD.Print("üîÅ Mirrored user://players.json ‚Üí res://players.json"); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
			}
			else
			{
				GD.PushWarning("‚ö†Ô∏è No user file found to mirror!"); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå user://  ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
			}
		}
		catch (Exception ex)
		{
			GD.PushWarning($"‚ö†Ô∏è Mirror failed: {ex.Message}");// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
		}
	}

	// ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå user://players.json
	// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (array) ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà (object { players: {...} })
	public List<SaveData> LoadPlayers()
	{
		try
		{
			string pathUser = ProjectSettings.GlobalizePath(SavePathUser); // ‡πÅ‡∏õ‡∏•‡∏á path user:// ‡πÄ‡∏õ‡πá‡∏ô path ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á

			if (!File.Exists(pathUser))   // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå user://players.json
				return new List<SaveData>(); // ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

			string json = File.ReadAllText(pathUser);// ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô string

			if (string.IsNullOrWhiteSpace(json)) // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
				return new List<SaveData>(); // ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á

			char first = '\0';  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)
			foreach (var ch in json)  // ‡∏ß‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
			{
				if (!char.IsWhiteSpace(ch)) { first = ch; break; } // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î
			}

			if (first == '[')   // ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ [ ‚Üí ‡πÄ‡∏õ‡πá‡∏ô array schema ‡πÄ‡∏Å‡πà‡∏≤
			{
				return JsonSerializer.Deserialize<List<SaveData>>(json) // ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô List<SaveData>
				?? new List<SaveData>(); // ‡∏ñ‡πâ‡∏≤ null ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á
			}

			using var doc = JsonDocument.Parse(json);   // ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô DOM object
			var root = doc.RootElement;   // ‡∏î‡∏∂‡∏á root ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£

			if (root.ValueKind != JsonValueKind.Object) // ‡∏ñ‡πâ‡∏≤ root ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà object
				return new List<SaveData>();  // ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á

			if (!root.TryGetProperty("players", out var playersElem)   // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ key "players"
				|| playersElem.ValueKind != JsonValueKind.Object) // ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà object
				return new List<SaveData>();  // ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á

			var list = new List<SaveData>();  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô

			foreach (var prop in playersElem.EnumerateObject())  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
			{
				var name = prop.Name; // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (key)
				var pObj = prop.Value;   // object ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
				string pwd = "";   // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
				string reg = "";   // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)

				if (pObj.ValueKind == JsonValueKind.Object)  // ‡∏ñ‡πâ‡∏≤ pObj ‡πÄ‡∏õ‡πá‡∏ô object
				{
					if (pObj.TryGetProperty("password", out var pwdElem)  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå "password"
						&& pwdElem.ValueKind == JsonValueKind.String) // ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô string
						pwd = pwdElem.GetString() ?? "";  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ string ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

					if (pObj.TryGetProperty("registered_at", out var regElem) // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå registered_at
						&& regElem.ValueKind == JsonValueKind.String)
						reg = regElem.GetString() ?? "";   // ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
					else if (pObj.TryGetProperty("CreatedAt", out var reg2Elem) // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏Å‡πà‡∏≤ CreatedAt
						&& reg2Elem.ValueKind == JsonValueKind.String)
						reg = reg2Elem.GetString() ?? "";
				}

				if (string.IsNullOrEmpty(reg))  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¢
					reg = DateTime.UtcNow.ToString("o"); // ‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (UTC ISO format)

				list.Add(new SaveData { PlayerName = name, Password = pwd, CreatedAt = reg }); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå
			}

			return list;  // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
		}
		catch (Exception ex)
		{
			GD.PushError("‚ùå Failed to parse JSON: " + ex.Message);  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô JSON
			return new List<SaveData>();   // ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á
		}
	}

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏û‡∏¥‡πà‡∏° record ‡∏•‡∏á user://players.json)
	public bool SavePlayer(string name, string password)
	{
		var doc = LeaderboardStore.LoadDoc();   // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô GDict
		doc = LeaderboardStore.EnsureRoot(doc);  // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ root object "players" ‡πÅ‡∏•‡∏∞ "leaderboards"
		var players = (GDict)doc["players"];   // ‡∏î‡∏∂‡∏á object "players" ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

		if (players.ContainsKey(name))  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
		{
			GD.Print("üö´ Duplicate name: " + name);  // ‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
			return false;  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
		}

		var nowIso = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz");// ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (ISO + timezone)

		players[name] = new GDict {   // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ Dictionary
			{ "password",      password }, // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
			{ "registered_at", nowIso   }, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£
			{ "levels",        new GDict() },    // object ‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å level ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
			{ "current_level", 1 },  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πÄ‡∏ß‡∏• 1
			{ "high_scores",   new GDict() }   // object ‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Å‡∏≠‡∏£‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
		};

		LeaderboardStore.SaveDoc(doc);   // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ user://players.json
		MirrorToRes();   // mirror ‡πÑ‡∏õ res:// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å
		GD.Print("‚úÖ Saved new user (new schema only): " + name);   // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

		try
		{
			var plain = ConvertToPlainDict(doc);    // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å GDict ‚Üí Dictionary ‡∏õ‡∏Å‡∏ï‡∏¥ (.NET)
			string json = JsonSerializer.Serialize(plain, new JsonSerializerOptions { WriteIndented = true }); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏ß‡∏¢
			string realPath = ProjectSettings.GlobalizePath(DefaultPath);  // ‡πÅ‡∏õ‡∏•‡∏á path res:// ‡πÄ‡∏õ‡πá‡∏ô path ‡∏à‡∏£‡∏¥‡∏á
			System.IO.File.WriteAllText(realPath, json);  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå players.json ‡∏•‡∏á res://
			GD.Print($"‚úÖ Saved players.json to RES (real path): {realPath}"); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
		}
		catch (Exception ex)
		{
			GD.PushWarning($"‚ö†Ô∏è Could not write back to res:// ‚Üí {ex.Message}"); // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Üí ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
		}

		SetCurrentUserAndStampToday(new SaveData {   // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
			PlayerName = name,   // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
			Password   = password,  // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
			CreatedAt  = nowIso  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£
		});

		CurrentPlayerName = name;  // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ UI ‡∏´‡∏£‡∏∑‡∏≠ HUD ‡πÉ‡∏ä‡πâ
		return true;  // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	}
	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå user://players.json
	// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + sync ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
	public bool LoginExisting(string name, string password)
	{
		var list = LoadPlayers(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
		var user = list.Find(p => p.PlayerName == name && p.Password == password); // ‡∏Ñ‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
		if (user == null) return false; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false (‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)

		SetCurrentUserAndStampToday(user);  // ‡∏ï‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ

		var doc = LeaderboardStore.LoadDoc();   // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ JSON ‡∏£‡∏ß‡∏° (Godot.Dictionary)
		doc = LeaderboardStore.EnsureRoot(doc); // ‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á root "players"/"leaderboards"
		var players = (GDict)doc["players"]; // ‡∏î‡∏∂‡∏á object ‡∏Ç‡∏≠‡∏á players ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

		if (!players.ContainsKey(name))  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô schema ‡πÉ‡∏´‡∏°‡πà
		{
			players[name] = new GDict {   // ‡∏™‡∏£‡πâ‡∏≤‡∏á record ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ
				{ "registered_at", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz") }, // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
				{ "levels",        new GDict() }, // object ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• level
				{ "current_level", 1 }  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà level 1
			};
			GD.Print($"[LoginExisting] üÜï Created new player record for {name}"); // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á record ‡πÉ‡∏´‡∏°‡πà
		}

		var p = (GDict)players[name];  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ p

		if (p.ContainsKey("levels")) // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ key "levels" (‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
		{
			var levels = (GDict)p["levels"]; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö (levels)
			int maxLv = 0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö level ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

			foreach (var key in levels.Keys) // ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å key (‡∏ä‡∏∑‡πà‡∏≠ level ‡πÄ‡∏ä‡πà‡∏ô "1", "2", "3")
			{
				if (int.TryParse(key.AsString(), out int lv)) // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ key ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
					maxLv = Math.Max(maxLv, lv);   // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ level ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
			}

			int current = p.ContainsKey("current_level") // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ key current_level
				? (int)(long)p["current_level"]    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å dict
				: 1;  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = 1

			GD.Print($"[LoginExisting] üîç Loaded from file ‚Üí current_level={current}, maxLvFound={maxLv}"); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡∏µ‡∏ö‡∏±‡∏Å

			if ((int)(long)p["current_level"] > maxLv)  // ‡∏ñ‡πâ‡∏≤ current_level ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ level ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
			{
				p["current_level"] = maxLv;  // ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö maxLv
				GD.Print($"[LoginExisting] üîß Fixed current_level (was higher than levels) ‚Üí now {maxLv}");
			}

			if (maxLv > current)  // ‡∏ñ‡πâ‡∏≤ level ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
			{
				p["current_level"] = maxLv; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï current_level = maxLv
				GD.Print($"[LoginExisting] üü¢ Auto-recovered current_level set to {maxLv}"); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
			}
			else
			{
				GD.Print($"[LoginExisting] ‚ÑπÔ∏è Keep current_level = {current}"); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
			}

			GameProgress.CurrentLevelIndex = (int)(long)p["current_level"]; // sync ‡∏Ñ‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
		}
		else
		{
			GameProgress.CurrentLevelIndex = 1;// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• levels ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà level 1
			GD.Print($"[LoginExisting] ‚ÑπÔ∏è No levels found ‚Üí set current_level = 1"); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á
		}

		LeaderboardStore.SaveDoc(doc); // ‡πÄ‡∏ã‡∏ü‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå user://players.json
		MirrorToRes(); // mirror ‡πÑ‡∏õ res:// (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å)
		CurrentPlayerName = name;    // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô HUD
		GD.Print($"[LoginExisting] * Loaded level {GameProgress.CurrentLevelIndex} for {name}"); // ‡πÅ‡∏™‡∏î‡∏á log ‡∏î‡∏µ‡∏ö‡∏±‡∏Å
		return true;  // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	}

	// Helpers: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Godot Variant ‚Üí .NET ‡∏õ‡∏Å‡∏ï‡∏¥ (serialize)

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Variant ‡∏Ç‡∏≠‡∏á Godot ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô object ‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô .NET
	// ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô serialize ‡∏î‡πâ‡∏ß‡∏¢ System.Text.Json
	private static object ConvertVariantToPlain(object value)
	{
		if (value is GDict gd)  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Godot.Dictionary
		{
			var dict = new Dictionary<string, object>(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á Dictionary ‡∏õ‡∏Å‡∏ï‡∏¥
			foreach (var key in gd.Keys)  // ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å key ‡∏Ç‡∏≠‡∏á GDict
			{
				string keyStr = key.AsString(); // ‡πÅ‡∏õ‡∏•‡∏á key ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string
				dict[keyStr] = ConvertVariantToPlain(gd[key]);  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô (recursive)
			}
			return dict;  // ‡∏Ñ‡∏∑‡∏ô Dictionary ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
		}
		else if (value is Godot.Collections.Array arr) // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á Godot
		{
			var list = new List<object>(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡∏õ‡∏Å‡∏ï‡∏¥
			foreach (var item in arr)  // ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å element
				list.Add(ConvertVariantToPlain(item));  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß (recursive)
			return list; // ‡∏Ñ‡∏∑‡∏ô List ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
		}
		else if (value is Variant var)   // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Variant (wrapper type ‡∏Ç‡∏≠‡∏á Godot)
		{
			return ConvertVariantToPlain(var.Obj);  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á Variant.Obj ‡∏°‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡πà‡∏≠
		}
		else
		{
			return value ?? "";   // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (int, string ‡∏Ø‡∏•‡∏Ø) ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
		}
	}

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á GDict (‡∏£‡∏π‡∏ó) ‚Üí Dictionary ‡∏õ‡∏Å‡∏ï‡∏¥ 
	// ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡πà‡∏≠‡∏ô serialize ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏™‡∏ß‡∏¢ ‡πÜ
	private static Dictionary<string, object> ConvertToPlainDict(GDict gdict)
	{
		var result = new Dictionary<string, object>();  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Dictionary ‡πÄ‡∏õ‡∏•‡πà‡∏≤
		foreach (var key in gdict.Keys) // ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô GDict
		{
			string keyStr = key.AsString();   // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏õ‡πá‡∏ô string
			result[keyStr] = ConvertVariantToPlain(gdict[key]); // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
		}
		return result; // ‡∏Ñ‡∏∑‡∏ô Dictionary ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
	}
}
