using Godot;                                      // ‡πÉ‡∏ä‡πâ API ‡∏Ç‡∏≠‡∏á Godot (Node, GD, ProjectSettings ‡∏Ø‡∏•‡∏Ø)
using System;                                     // .NET base (DateTime, Exception)
using System.Collections.Generic;                 // List<T>
using System.IO;                                  // File, File.Exists, File.ReadAllText
using System.Text.Json;                           // System.Text.Json ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parse JSON (‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà/‡πÄ‡∏Å‡πà‡∏≤)
// ‡πÉ‡∏ä‡πâ GDict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö LeaderboardStore (Godot.Dictionary)
using GDict = Godot.Collections.Dictionary;       // alias ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏±‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô

public partial class PlayerLogin : Node           // ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ã‡∏¥‡∏á‡πÄ‡∏Å‡∏¥‡∏•‡∏ï‡∏±‡∏ô (Autoload) ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô/‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
{
	public static PlayerLogin Instance { get; private set; } // ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ global ‡∏Ç‡∏≠‡∏á‡∏ã‡∏¥‡∏á‡πÄ‡∏Å‡∏¥‡∏•‡∏ï‡∏±‡∏ô
	
	public string CurrentPlayerName { get; private set; } = "Guest";

	// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ set ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ Error CS0272)
	public SaveData CurrentUser { get; set; }      // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	public string TodayKey { get; internal set; }   // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (yyyy-MM-dd) ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° high score ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
	
	// ‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‚Äú‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á‚Äù ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô user:// ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
	private string SavePathUser = "user://players.json";  // path ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏° (players + leaderboards) ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå user
	private string DefaultPath = "res://SceneLogin/saveUserLogin/players.json";

	public class SaveData                           // ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1 ‡∏Ñ‡∏ô
	{
		public string PlayerName { get; set; }      // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
		public string Password   { get; set; }      // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Æ‡∏ä‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô)
		public string CreatedAt  { get; set; }      // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£/‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á (ISO 8601)
	}

	private string MakeTodayKeyLocal() => DateTime.Now.ToString("yyyy-MM-dd"); // ‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö yyyy-MM-dd

	public void StampTodayKey()                     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï TodayKey ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô)
	{
		TodayKey = MakeTodayKeyLocal();             // ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏µ‡∏¢‡πå
		GD.Print($"üóìÔ∏è TodayKey set to {TodayKey}"); // log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å
	}

	public void SetCurrentUserAndStampToday(SaveData user) // ‡∏ï‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + ‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö TodayKey
	{
		CurrentUser = user;                         // ‡πÄ‡∏ã‡πá‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
		StampTodayKey();                            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏µ‡∏¢‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
		GD.Print($"üîë Login as {CurrentUser?.PlayerName ?? "(null)"} ; TodayKey={TodayKey}"); // log
	}

	public override void _Ready()                   // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏ô‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
	{
		Instance = this;                            // ‡∏ï‡∏±‡πâ‡∏á‡∏ã‡∏¥‡∏á‡πÄ‡∏Å‡∏¥‡∏•‡∏ï‡∏±‡∏ô
		TodayKey = MakeTodayKeyLocal();             // ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á TodayKey
		GD.Print("üü¢ PlayerLogin ready at " + ProjectSettings.GlobalizePath(SavePathUser)); // ‡∏û‡∏¥‡∏°‡∏û‡πå path ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô‡∏î‡∏¥‡∏™‡∏Å‡πå
		GD.Print($"üóìÔ∏è Initial TodayKey = {TodayKey}"); // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏µ‡∏¢‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	}

	// ===== Loader: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÄ‡∏Å‡πà‡∏≤ [] ‡πÅ‡∏•‡∏∞‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà { "players": { ... } } ; ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user:// =====
	public List<SaveData> LoadPlayers()             // ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå user://players.json
	{
		try
		{
			string pathUser = ProjectSettings.GlobalizePath(SavePathUser); // ‡πÅ‡∏õ‡∏•‡∏á user:// ‚Üí path ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
			if (!File.Exists(pathUser)) return new List<SaveData>();       // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á

			string json = File.ReadAllText(pathUser);                      // ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
			if (string.IsNullOrWhiteSpace(json)) return new List<SaveData>(); // ‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å schema
			char first = '\0';                                             // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà white space
			foreach (var ch in json) { if (!char.IsWhiteSpace(ch)) { first = ch; break; } }

			// ‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÄ‡∏Å‡πà‡∏≤: ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå SaveData ‡∏ï‡∏£‡∏á ‡πÜ
			if (first == '[')                                              // ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ '[' ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array
			{
				return JsonSerializer.Deserialize<List<SaveData>>(json)    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô List<SaveData>
					   ?? new List<SaveData>();                            // ‡∏ñ‡πâ‡∏≤ null ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á
			}

			// ‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ "players"
			using var doc = JsonDocument.Parse(json);                       // parse ‡πÄ‡∏õ‡πá‡∏ô JsonDocument
			var root = doc.RootElement;                                     // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á root
			if (root.ValueKind != JsonValueKind.Object) return new List<SaveData>(); // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà object ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏ß‡πà‡∏≤‡∏á
			if (!root.TryGetProperty("players", out var playersElem) ||     // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå "players"
				playersElem.ValueKind != JsonValueKind.Object)
				return new List<SaveData>();                                // ‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏ß‡πà‡∏≤‡∏á

			var list = new List<SaveData>();                                // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
			foreach (var prop in playersElem.EnumerateObject())             // ‡∏ß‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (key = ‡∏ä‡∏∑‡πà‡∏≠)
			{
				var name = prop.Name;                                       // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡πá‡∏≠‡∏û‡πÄ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏µ
				var pObj = prop.Value;                                      // ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á object ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô

				string pwd = "";                                            // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
				string reg = "";                                            // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£

				if (pObj.ValueKind == JsonValueKind.Object)                 // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
				{
					if (pObj.TryGetProperty("password", out var pwdElem) && // ‡∏°‡∏µ password?
						pwdElem.ValueKind == JsonValueKind.String)
						pwd = pwdElem.GetString() ?? "";                     // ‡∏≠‡πà‡∏≤‡∏ô password

					// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á registered_at ‡πÅ‡∏•‡∏∞ CreatedAt
					if (pObj.TryGetProperty("registered_at", out var regElem) && // ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
						regElem.ValueKind == JsonValueKind.String)
						reg = regElem.GetString() ?? "";
					else if (pObj.TryGetProperty("CreatedAt", out var reg2Elem) && // ‡∏ö‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ä‡πâ CreatedAt
							 reg2Elem.ValueKind == JsonValueKind.String)
						reg = reg2Elem.GetString() ?? "";
				}

				if (string.IsNullOrEmpty(reg))                               // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
					reg = DateTime.UtcNow.ToString("o");                     // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏ö‡∏ö ISO (UTC)

				list.Add(new SaveData {                                      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
					PlayerName = name,
					Password   = pwd,
					CreatedAt  = reg
				});
			}

			return list;                                                     // ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
		}
		catch (Exception ex)                                                 // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô/parse
		{
			GD.PushError("‚ùå Failed to parse JSON: " + ex.Message);          // log error
			return new List<SaveData>();                                     // ‡∏Ñ‡∏∑‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
		}
	}

	// ===== ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ú‡πà‡∏≤‡∏ô LeaderboardStore; ‡πÑ‡∏°‡πà‡∏¢‡∏∏‡πà‡∏á‡∏Å‡∏±‡∏ö res://) =====
	public bool SavePlayer(string name, string password) // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á players.json (‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà)
	{
		var doc = LeaderboardStore.LoadDoc();                  // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏ß‡∏° (Dictionary) ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
		doc = LeaderboardStore.EnsureRoot(doc);                // ensure ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô "players", "leaderboards"

		var players = (GDict)doc["players"];                   // ‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡πÇ‡∏´‡∏ô‡∏î players
		if (players.ContainsKey(name))                         // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
		{
			GD.Print("üö´ Duplicate name: " + name);            // log ‡πÅ‡∏•‡∏∞
			return false;                                      // ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
		}

		var nowIso = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz"); // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡∏ï‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° timezone
		players[name] = new GDict {                                   // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
			{ "password",      password },                             // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™ (plain-text ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
			{ "registered_at", nowIso },                               // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
			{ "levels",        new GDict() },                           // ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πà‡∏≤‡∏ô
			{ "current_level", 1 },              // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πà‡∏≤‡∏ô 1
			{ "high_scores",   new GDict() }     // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÄ‡∏Å‡πá‡∏ö high score ‡∏£‡∏≤‡∏¢‡πÄ‡∏•‡πÄ‡∏ß‡∏•
			
		};

		// ‡πÄ‡∏ã‡∏ü‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏ß‡∏° (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô LeaderboardStore ‡πÄ‡∏≠‡∏á)
		LeaderboardStore.SaveDoc(doc);                                 // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå user://players.json

		GD.Print("‚úÖ Saved new user (new schema only): " + name);      // log ‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

		SetCurrentUserAndStampToday(new SaveData {                      // ‡∏ï‡∏±‡πâ‡∏á CurrentUser ‡πÅ‡∏•‡∏∞ TodayKey ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
			PlayerName = name,
			Password   = password,
			CreatedAt  = nowIso
		});
		
		// üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ (‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ HUD ‡πÉ‡∏ä‡πâ)
		CurrentPlayerName = name;

		return true;                                                   // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	}

// ===== ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏° (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå user://players.json) =====
public bool LoginExisting(string name, string password)
{
	var list = LoadPlayers();
	var user = list.Find(p => p.PlayerName == name && p.Password == password);
	if (user == null) return false;

	SetCurrentUserAndStampToday(user);

	var doc = LeaderboardStore.LoadDoc();
	doc = LeaderboardStore.EnsureRoot(doc);
	var players = (GDict)doc["players"];

	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ record ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
	if (!players.ContainsKey(name))
	{
		players[name] = new GDict {
			{ "registered_at", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz") },
			{ "levels", new GDict() },
			{ "current_level", 1 }
		};
		GD.Print($"[LoginExisting] üÜï Created new player record for {name}");
	}

	var p = (GDict)players[name];

	// üü¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏µ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ñ‡∏∂‡∏á‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï current_level ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
	if (p.ContainsKey("levels"))
	{
		var levels = (GDict)p["levels"];
		int maxLv = 0;
		foreach (var key in levels.Keys)
		{
			if (int.TryParse(key.AsString(), out int lv))
				maxLv = Math.Max(maxLv, lv);  // ‚ùó ‡πÑ‡∏°‡πà‡∏ö‡∏ß‡∏Å +1 ‡πÅ‡∏•‡πâ‡∏ß
		}

		int current = p.ContainsKey("current_level") ? (int)(long)p["current_level"] : 1;

		// ‚úÖ Debug Log
		GD.Print($"[LoginExisting] üîç Loaded from file ‚Üí current_level={current}, maxLvFound={maxLv}");
		
		// ‡∏ñ‡πâ‡∏≤ current_level > maxLvFound ‚Üí ‡∏•‡∏î‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
		if ((int)(long)p["current_level"] > maxLv)
		{
		p["current_level"] = maxLv;
		GD.Print($"[LoginExisting] üîß Fixed current_level (was higher than levels) ‚Üí now {maxLv}");
		}

		if (maxLv > current)
		{
			p["current_level"] = maxLv;
			GD.Print($"[LoginExisting] üü¢ Auto-recovered current_level set to {maxLv}");
		}
		else
		{
			GD.Print($"[LoginExisting] ‚ÑπÔ∏è Keep current_level = {current}");
		}

		GameProgress.CurrentLevelIndex = (int)(long)p["current_level"];
	}
	else
	{
		GameProgress.CurrentLevelIndex = 1;
		GD.Print($"[LoginExisting] ‚ÑπÔ∏è No levels found ‚Üí set current_level = 1");
	}

	LeaderboardStore.SaveDoc(doc);  // ‚úÖ ‡πÄ‡∏ã‡∏ü‡∏Å‡∏•‡∏±‡∏ö

	CurrentPlayerName = name;
	GD.Print($"[LoginExisting] üîì Loaded level {GameProgress.CurrentLevelIndex} for {name}");
	return true;
}

}
