using Godot;                                     // ‡πÉ‡∏ä‡πâ API ‡∏Ç‡∏≠‡∏á Godot (Node2D, Label, Button, ResourceLoader ‡∏Ø‡∏•‡∏Ø)
using System;                                    // ‡πÉ‡∏ä‡πâ .NET ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (DateTime ‡∏Ø‡∏•‡∏Ø)
using System.Globalization;                      // ‡πÉ‡∏ä‡πâ CultureInfo / DateTimeStyles ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parse/format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà

public partial class StartGame : Node2D          // ‡∏ã‡∏µ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°/‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å ‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å Node2D
{
	[Export] private NodePath PlayerInfoPath;    // [Export] ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á path ‡∏Ç‡∏≠‡∏á Label ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Inspector

	// ‡∏õ‡∏∏‡πà‡∏° (‡∏ï‡∏±‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô Inspector ‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô)
	[Export] private NodePath StartButtonPath;   // [Export] path ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô
	[Export] private NodePath HighscoreButtonPath; // [Export] path ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ High Score

	// ‚Üê ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì‡∏à‡∏£‡∏¥‡∏á ‡πÜ
	private const string PLAY_SCENE      = "res://scenecheckpoint/checkpoint.tscn"; // ‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏ã‡∏µ‡∏ô "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°"
	private const string HIGHSCORE_SCENE = "res://SceneHighSc/HighScore.tscn";      // ‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏ã‡∏µ‡∏ô "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"

	private Label _playerInfo;                   // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Label ‡∏ó‡∏µ‡πà‡πÇ‡∏ä‡∏ß‡πå‡∏ä‡∏∑‡πà‡∏≠/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£
	private Button _startBtn;                    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°
	private Button _highBtn;                     // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏õ‡∏∏‡πà‡∏° High Score

	public override void _Ready()                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏ô‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° (‡∏ã‡∏µ‡∏ô‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö)
	{
		// ----- ‡∏´‡∏≤ Label ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£ -----
		_playerInfo = GetNodeOrNull<Label>(PlayerInfoPath)               // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏° path ‡∏à‡∏≤‡∏Å Inspector ‡∏Å‡πà‡∏≠‡∏ô
					  ?? GetNodeOrNull<Label>("CanvasLayer/PlayerInfo"); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ path ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô

		if (_playerInfo == null)                     // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Label
		{
			GD.PushError("PlayerInfo Label not found."); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Output ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å
		}
		else
		{
			ShowUserInfo();                           // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
		}

		// ----- ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° -----
		_startBtn = GetNodeOrNull<Button>(StartButtonPath)               // ‡∏´‡∏≤ StartButton ‡∏ï‡∏≤‡∏° Inspector
					?? GetNodeOrNull<Button>("Sprite2D/StartButton");    // ‡∏´‡∏£‡∏∑‡∏≠ path ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô
		_highBtn  = GetNodeOrNull<Button>(HighscoreButtonPath)           // ‡∏´‡∏≤ HighscoreButton ‡∏ï‡∏≤‡∏° Inspector
					?? GetNodeOrNull<Button>("Sprite2D/HighscButton");   // ‡∏´‡∏£‡∏∑‡∏≠ path ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô

		if (_startBtn != null) _startBtn.Pressed += OnStartPressed;      // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö: ‡∏ú‡∏π‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏Å‡∏î ‚Üí ‡πÑ‡∏õ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
		else GD.PushError("StartButton not found or not a Button.");     // ‡πÑ‡∏°‡πà‡∏û‡∏ö: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

		if (_highBtn != null) _highBtn.Pressed += OnHighscorePressed;    // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö: ‡∏ú‡∏π‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏Å‡∏î ‚Üí ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ High Score
		else GD.PushError("HighscButton not found or not a Button.");    // ‡πÑ‡∏°‡πà‡∏û‡∏ö: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
	}

	private void ShowUserInfo()                                           // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ö‡∏ô Label
	{
		var pl = PlayerLogin.Instance;                                    // ‡∏≠‡πâ‡∏≤‡∏á‡∏ã‡∏¥‡∏á‡πÄ‡∏Å‡∏¥‡∏•‡∏ï‡∏±‡∏ô PlayerLogin (autoload)
		if (pl == null || _playerInfo == null) return;                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Label ‡πÉ‡∏´‡πâ‡∏à‡∏ö

		var u = pl.CurrentUser;                                           // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		if (u == null)                                                    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
		{
			var list = pl.LoadPlayers();                                   // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
			if (list.Count > 0) u = list[^1];                              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏°‡∏ï‡∏¥)
		}
		if (u == null)                                                    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
		{
			_playerInfo.Text = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô";                      // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
			return;
		}

		// ===== Parse ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. =====
		string dateText;                                                  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏ä‡∏ß‡πå
		try
		{
			DateTime dt;                                                  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á parse

			// ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô (ISO 8601 ‡∏Ø‡∏•‡∏Ø)
			string[] isoFormats = {
				"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'",
				"yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'",
				"yyyy'-'MM'-'dd'T'HH':'mm':'ss",
				"yyyy-MM-dd HH:mm:ss",
				"yyyy/MM/dd HH:mm:ss",
				"yyyy-MM-dd",
				"yyyy/MM/dd"
			};

			// TryParseExact: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô ‡πÉ‡∏ä‡πâ InvariantCulture ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏•ocale‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
			if (!DateTime.TryParseExact(
					u.CreatedAt,
					isoFormats,
					CultureInfo.InvariantCulture,
					DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal, // ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ UTC ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC
					out dt))
			{
				// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô ‡∏•‡∏≠‡∏á Parse ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤/‡πÅ‡∏õ‡∏•‡∏Å)
				if (!DateTime.TryParse(
						u.CreatedAt,
						CultureInfo.InvariantCulture,
						DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal,
						out dt))
				{
					// ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï
					_playerInfo.Text = $"üë§ {u.PlayerName}\nüìÖ {u.CreatedAt}";
					return;
				}
			}

			var local = dt.ToLocalTime();                                  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
			// ‡πÉ‡∏ä‡πâ InvariantCulture + ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/MM/yyyy (MM = ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‚Üí ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏µ‡∏Ñ.‡∏®. ‡πÑ‡∏°‡πà‡∏á‡∏≠‡πÅ‡∏á‡∏Å‡∏±‡∏ö locale
			dateText = local.ToString("dd'/'MM'/'yyyy", CultureInfo.InvariantCulture);
		}
		catch
		{
			// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏î ‡πÜ (‡πÄ‡∏ä‡πà‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô) ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
			dateText = u.CreatedAt;
		}

		_playerInfo.Text = $"üë§ {u.PlayerName}\nüìÖ {dateText}";           // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠ + ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
		_playerInfo.AddThemeColorOverride("font_color", new Color(1, 1, 1)); // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
		_playerInfo.AddThemeFontSizeOverride("font_size", 22);            // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå
		_playerInfo.MouseFilter = Control.MouseFilterEnum.Ignore;         // ‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÄ‡∏°‡∏≤‡∏™‡πå (‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á)
	}

	private void OnStartPressed()                                          // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
	{
		if (ResourceLoader.Exists(PLAY_SCENE))                             // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ã‡∏µ‡∏ô‡∏à‡∏£‡∏¥‡∏á
			GetTree().ChangeSceneToFile(PLAY_SCENE);                       // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ã‡∏µ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏â‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
		else
			GD.PushError($"Play scene not found: {PLAY_SCENE}");           // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Output
	}

	private void OnHighscorePressed()                                      // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° High Score
	{
		if (ResourceLoader.Exists(HIGHSCORE_SCENE))                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ã‡∏µ‡∏ô‡∏à‡∏£‡∏¥‡∏á
			GetTree().ChangeSceneToFile(HIGHSCORE_SCENE);                  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ã‡∏µ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏â‡∏≤‡∏Å High Score
		else
			GD.PushError($"Highscore scene not found: {HIGHSCORE_SCENE}"); // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Output
	}
}
