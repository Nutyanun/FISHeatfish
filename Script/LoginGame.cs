using Godot;
using System;
using System.Collections.Generic;

public partial class LoginGame : Control
{
	// ‡∏ï‡∏±‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô Inspector ‡πÑ‡∏î‡πâ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ path ‡πÉ‡∏ô‡∏â‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
	[Export] private NodePath NameInputPath;
	[Export] private NodePath PasswordInputPath;
	[Export] private NodePath ErrorLabelPath;
	[Export] private NodePath SubmitButtonPath;

	private LineEdit _nameInput;
	private LineEdit _passwordInput;
	private Label _errorLabel;
	private Button _submitButton;

	// ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	private const string AllowedSpecials = @"!@#$%^&*()-_=+[]{};:'"",.<>/?\|`~";

	public override void _Ready()
	{
		_nameInput     = GetNodeOrNull<LineEdit>(NameInputPath)
					  ?? GetNodeOrNull<LineEdit>("CenterContainer/VBoxContainer/NameInput");

		_passwordInput = GetNodeOrNull<LineEdit>(PasswordInputPath)
					  ?? GetNodeOrNull<LineEdit>("CenterContainer/VBoxContainer/PasswordInput");

		_errorLabel    = GetNodeOrNull<Label>(ErrorLabelPath)
					  ?? GetNodeOrNull<Label>("CenterContainer/VBoxContainer/ErrorLabel");

		_submitButton  = GetNodeOrNull<Button>(SubmitButtonPath)
					  ?? GetNodeOrNull<Button>("CenterContainer/VBoxContainer/SubmitButton");

		if (_nameInput == null)     GD.PushError("NameInput not found.");
		if (_passwordInput == null) GD.PushError("PasswordInput not found.");
		if (_errorLabel == null)    GD.PushError("ErrorLabel not found.");
		if (_submitButton == null)  GD.PushError("SubmitButton not found.");

		if (_errorLabel != null) _errorLabel.Visible = false;
		if (_submitButton != null) _submitButton.Pressed += OnSubmit;

		if (_passwordInput != null) _passwordInput.Secret = true; // ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™
	}

	// -------------------- MAIN FLOW --------------------
	private void OnSubmit()
	{
		if (_nameInput == null || _passwordInput == null || _errorLabel == null)
		{
			GD.PushError("UI nodes missing, cannot submit.");
			return;
		}

		// 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠
		string name = (_nameInput.Text ?? "").Trim();
		if (name.Length == 0)
		{
			ShowError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
			return;
		}
		string badName = GetInvalidNameChars(name);
		if (!string.IsNullOrEmpty(badName))
		{
			ShowError($"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©: {badName}");
			return;
		}

		// 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
		string password = (_passwordInput.Text ?? "").Trim();
		string pwdErr = ValidatePassword(password);
		if (pwdErr != null)
		{
			ShowError(pwdErr);
			return;
		}

		// 3) ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (Autoload: PlayerLogin)
		var saver = PlayerLogin.Instance ?? GetNodeOrNull<PlayerLogin>("/root/PlayerLogin");
		if (saver == null)
		{
			ShowError("‡∏£‡∏∞‡∏ö‡∏ö PlayerLogin (Autoload) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
			GD.PushError("Missing /root/PlayerLogin. Add Autoload.");
			return;
		}

		// 4) ‡∏•‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
		if (saver.LoginExisting(name, password))
		{
			HideError();
			GD.Print($"‚úÖ Login OK: {saver.CurrentUser?.PlayerName}");
			GoNext();
			return;
		}

		// 5) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏Å‡πá‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà
		if (!saver.SavePlayer(name, password))
		{
			ShowError("‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô");
			return;
		}

		// SavePlayer() ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á CurrentUser ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
		// ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î: ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ CurrentUser ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
		if (saver.CurrentUser == null)
		{
			saver.CurrentUser = new PlayerLogin.SaveData
			{
				PlayerName = name,
				Password   = password,
				CreatedAt  = DateTime.UtcNow.ToString("o"),
			};
		}

		HideError();
		GD.Print($"üéâ Registered & Login: {saver.CurrentUser?.PlayerName}");
		GoNext();
	}

	// -------------------- Scene Transition --------------------
	private void GoNext()
	{
		HideError();
		GD.Print($"Login success ‚Üí {(_nameInput?.Text ?? "")}");
		const string nextScene = "res://SceneStartandHigh/StartGame.tscn";
		if (ResourceLoader.Exists(nextScene))
			GetTree().ChangeSceneToFile(nextScene);
		else
			ShowError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏µ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: " + nextScene);
	}

	// -------------------- Helpers --------------------
	// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï A‚ÄìZ a‚Äìz 0‚Äì9 ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢
	private string GetInvalidNameChars(string s)
	{
		var list = new List<char>();
		foreach (char c in s)
		{
			if (!(char.IsLetterOrDigit(c) || (c >= 0x0E00 && c <= 0x0E7F)))
				if (!list.Contains(c)) list.Add(c);
		}
		return string.Join(", ", list);
	}

	// ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á ‚â• 6 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ a-z A-Z 0-9 ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡πÉ‡∏ô AllowedSpecials
	private string ValidatePassword(string pwd)
	{
		if (string.IsNullOrEmpty(pwd) || pwd.Length < 6)
			return "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß";

		var invalids = new List<char>();
		foreach (char c in pwd)
		{
			if (char.IsLetterOrDigit(c)) continue;
			if (AllowedSpecials.IndexOf(c) >= 0) continue;
			if (!invalids.Contains(c)) invalids.Add(c);
		}
		if (invalids.Count > 0)
			return $"‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: {string.Join(", ", invalids)}";

		return null; // ‡∏ú‡πà‡∏≤‡∏ô
	}

	private void ShowError(string msg)
	{
		_errorLabel.Text = msg;
		_errorLabel.Visible = true;
		_errorLabel.Modulate = new Color(1, 0, 0);
	}

	private void HideError()
	{
		_errorLabel.Text = "";
		_errorLabel.Visible = false;
	}
}
