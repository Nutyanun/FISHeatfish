using Godot;                                         // ‡∏≠‡∏¥‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï API ‡∏Ç‡∏≠‡∏á Godot (Control, LineEdit, Label, Button, ResourceLoader, etc.)
using System;                                        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á .NET (DateTime, String, ‡∏Ø‡∏•‡∏Ø)
using System.Collections.Generic;                    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô List<T>

public partial class LoginGame : Control             // ‡∏Ñ‡∏•‡∏≤‡∏™ LoginGame ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏• (‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)
{
	// ‡∏ï‡∏±‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô Inspector ‡πÑ‡∏î‡πâ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ path ‡πÉ‡∏ô‡∏â‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
	[Export] private NodePath NameInputPath;         // path ‡∏Ç‡∏≠‡∏á LineEdit ‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	[Export] private NodePath PasswordInputPath;     // path ‡∏Ç‡∏≠‡∏á LineEdit ‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	[Export] private NodePath ErrorLabelPath;        // path ‡∏Ç‡∏≠‡∏á Label ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
	[Export] private NodePath SubmitButtonPath;      // path ‡∏Ç‡∏≠‡∏á Button ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡πÑ‡∏õ‡∏ï‡πà‡∏≠

	private LineEdit _nameInput;                     // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠
	private LineEdit _passwordInput;                 // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	private Label _errorLabel;                       // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
	private Button _submitButton;                    // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô

	// ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	private const string AllowedSpecials = @"!@#$%^&*()-_=+[]{};:'"",.<>/?\|`~"; // ‡∏ä‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (verbatim string)

	public override void _Ready()                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏ô‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
	{
		_nameInput     = GetNodeOrNull<LineEdit>(NameInputPath)                 // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏° path ‡∏à‡∏≤‡∏Å Inspector
					  ?? GetNodeOrNull<LineEdit>("CenterContainer/VBoxContainer/NameInput"); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ path ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô

		_passwordInput = GetNodeOrNull<LineEdit>(PasswordInputPath)             // ‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
					  ?? GetNodeOrNull<LineEdit>("CenterContainer/VBoxContainer/PasswordInput"); // path ‡∏™‡∏≥‡∏£‡∏≠‡∏á

		_errorLabel    = GetNodeOrNull<Label>(ErrorLabelPath)                   // ‡∏î‡∏∂‡∏á Label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error
					  ?? GetNodeOrNull<Label>("CenterContainer/VBoxContainer/ErrorLabel");       // path ‡∏™‡∏≥‡∏£‡∏≠‡∏á

		_submitButton  = GetNodeOrNull<Button>(SubmitButtonPath)                // ‡∏î‡∏∂‡∏á‡∏õ‡∏∏‡πà‡∏° Submit
					  ?? GetNodeOrNull<Button>("CenterContainer/VBoxContainer/SubmitButton");    // path ‡∏™‡∏≥‡∏£‡∏≠‡∏á

		if (_nameInput == null)     GD.PushError("NameInput not found.");       // ‡πÅ‡∏à‡πâ‡∏á error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö node
		if (_passwordInput == null) GD.PushError("PasswordInput not found.");
		if (_errorLabel == null)    GD.PushError("ErrorLabel not found.");
		if (_submitButton == null)  GD.PushError("SubmitButton not found.");

		if (_errorLabel != null) _errorLabel.Visible = false;                   // ‡∏ã‡πà‡∏≠‡∏ô error ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
		if (_submitButton != null) _submitButton.Pressed += OnSubmit;           // ‡∏ú‡∏π‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Üí OnSubmit()

		if (_passwordInput != null) _passwordInput.Secret = true;               // ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‚óè‚óè‚óè)
	}

	// -------------------- MAIN FLOW --------------------
	private void OnSubmit()                                                     // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Submit
	{
		if (_nameInput == null || _passwordInput == null || _errorLabel == null) // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ node ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
		{
			GD.PushError("UI nodes missing, cannot submit.");                   // log ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î
			return;
		}

		// 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠
		string name = (_nameInput.Text ?? "").Trim();                           // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ (‡∏Å‡∏±‡∏ô null) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢
		if (name.Length == 0)                                                   // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å
		{
			ShowError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");                  // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
			return;                                                             // ‡∏à‡∏ö flow
		}
		string badName = GetInvalidNameChars(name);                             // ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠
		if (!string.IsNullOrEmpty(badName))                                     // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö
		{
			ShowError($"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©: {badName}"); // ‡πÇ‡∏ä‡∏ß‡πå‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
			return;
		}

		// 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
		string password = (_passwordInput.Text ?? "").Trim();                   // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏Å‡∏±‡∏ô null) ‡πÅ‡∏•‡∏∞ Trim
		string pwdErr = ValidatePassword(password);                              // ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß/‡∏ä‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
		if (pwdErr != null)                                                     // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
		{
			ShowError(pwdErr);                                                  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
			return;
		}

		// 3) ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (Autoload: PlayerLogin)
		var saver = PlayerLogin.Instance                                        // ‡πÉ‡∏ä‡πâ‡∏ã‡∏¥‡∏á‡πÄ‡∏Å‡∏¥‡∏•‡∏ï‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
				 ?? GetNodeOrNull<PlayerLogin>("/root/PlayerLogin");           // ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Autoload path
		if (saver == null)                                                      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏∞‡∏ö‡∏ö
		{
			ShowError("‡∏£‡∏∞‡∏ö‡∏ö PlayerLogin (Autoload) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");       // ‡∏ö‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
			GD.PushError("Missing /root/PlayerLogin. Add Autoload.");          // log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dev
			return;
		}

		// 4) ‡∏•‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
		if (saver.LoginExisting(name, password))                                // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ñ‡∏π‡∏Å
		{
			HideError();                                                        // ‡∏ã‡πà‡∏≠‡∏ô error
			GD.Print($"‚úÖ Login OK: {saver.CurrentUser?.PlayerName}");          // log ‡∏î‡∏µ‡∏ö‡∏±‡∏Å
			GoNext();                                                           // ‡πÑ‡∏õ‡∏ã‡∏µ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
			return;                                                             // ‡∏à‡∏ö flow
		}

		// 5) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏Å‡πá‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà
		if (!saver.SavePlayer(name, password))                                  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤ false = ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥/‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)
		{
			ShowError("‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô");                  // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
			return;
		}

		// SavePlayer() ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á CurrentUser ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
		// ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î: ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ CurrentUser ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
		if (saver.CurrentUser == null)                                          // safety-net ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î SavePlayer ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
		{
			saver.CurrentUser = new PlayerLogin.SaveData                        // ‡∏ï‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
			{
				PlayerName = name,                                              // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
				Password   = password,                                          // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏Æ‡∏ä‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô)
				CreatedAt  = DateTime.UtcNow.ToString("o"),                     // ‡πÄ‡∏ß‡∏•‡∏≤ UTC ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO 8601
			};
		}

		HideError();                                                            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error
		GD.Print($"üéâ Registered & Login: {saver.CurrentUser?.PlayerName}");    // log ‡∏î‡∏µ‡∏ö‡∏±‡∏Å
		GoNext();                                                               // ‡πÑ‡∏õ‡∏ã‡∏µ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
	}

	// -------------------- Scene Transition --------------------
	private void GoNext()                                                       // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ã‡∏µ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	{
		HideError();                                                            // ‡∏ã‡πà‡∏≠‡∏ô error ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏≤‡∏á
		GD.Print($"Login success ‚Üí {(_nameInput?.Text ?? "")}");                // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
		const string nextScene = "res://SceneStartandHigh/StartGame.tscn";      // ‡πÑ‡∏ü‡∏•‡πå‡∏ã‡∏µ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
		if (ResourceLoader.Exists(nextScene))                                   // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
			GetTree().ChangeSceneToFile(nextScene);                             // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ã‡∏µ‡∏ô
		else                                                                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå
			ShowError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏µ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: " + nextScene);                         // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
	}

	// -------------------- Helpers --------------------
	// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï A‚ÄìZ a‚Äìz 0‚Äì9 ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢
	private string GetInvalidNameChars(string s)                                // ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma)
	{
		var list = new List<char>();                                            // ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
		foreach (char c in s)                                                   // ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
		{
			if (!(char.IsLetterOrDigit(c) || (c >= 0x0E00 && c <= 0x0E7F)))     // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï a-zA-Z0-9 ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏á Unicode ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
				if (!list.Contains(c)) list.Add(c);                             // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
		}
		return string.Join(", ", list);                                         // ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢ ", "
	}

	// ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á ‚â• 6 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ a-z A-Z 0-9 ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡πÉ‡∏ô AllowedSpecials
	private string ValidatePassword(string pwd)                                 // ‡∏Ñ‡∏∑‡∏ô null ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
	{
		if (string.IsNullOrEmpty(pwd) || pwd.Length < 6)                        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
			return "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß";                           // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

		var invalids = new List<char>();                                        // ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
		foreach (char c in pwd)                                                 // ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
		{
			if (char.IsLetterOrDigit(c)) continue;                              // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‚Üí ‡∏ú‡πà‡∏≤‡∏ô
			if (AllowedSpecials.IndexOf(c) >= 0) continue;                      // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‚Üí ‡∏ú‡πà‡∏≤‡∏ô
			if (!invalids.Contains(c)) invalids.Add(c);                         // ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‚Üí ‡πÄ‡∏Å‡πá‡∏ö (‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥)
		}
		if (invalids.Count > 0)                                                 // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ú‡∏¥‡∏î
			return $"‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: {string.Join(", ", invalids)}"; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

		return null;                                                            // ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
	}

	private void ShowError(string msg)                                          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
	{
		_errorLabel.Text = msg;                                                 // ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
		_errorLabel.Visible = true;                                             // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
		_errorLabel.Modulate = new Color(1, 0, 0);                              // ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô
	}

	private void HideError()                                                    // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
	{
		_errorLabel.Text = "";                                                  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
		_errorLabel.Visible = false;                                            // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
	}
}
